
&НаКлиенте
Процедура Заполнить(Команда)
	ДанныеОбъектов.Очистить();
	ЗаполнитьНаСервере();
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	рн_СеансыОбменаПрисоединенныеФайлы.Ссылка КАК ПриложенныйФайл,
	|	рн_СеансыОбменаПрисоединенныеФайлы.ВладелецФайла КАК Сеанс
	|ИЗ
	|	Справочник.рн_СеансыОбменаПрисоединенныеФайлы КАК рн_СеансыОбменаПрисоединенныеФайлы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(рн_СеансыОбменаПрисоединенныеФайлы.ВладелецФайла) = ТИП(Документ.рн_СеансыОбмена)
	|	И рн_СеансыОбменаПрисоединенныеФайлы.ВладелецФайла.Система = ЗНАЧЕНИЕ(Справочник.рн_МодулиИнтеграции.GCрозница)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Путь к каталогу временных файлов
	ИмяКаталога = КаталогВременныхФайлов();
	
	ВыборкаФайлы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаФайлы.Следующий() Цикл
		
		// Получим приложенный к сеансу обмена zip-архив
		ДвоичныеДанныеПакетаДанных = РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаФайлы.ПриложенныйФайл);
		
		// Начинаем распаковку
		ПотокПакетаДанных = ДвоичныеДанныеПакетаДанных.ОткрытьПотокДляЧтения();
		//Если архив целый
		Попытка
			ЧтениеZIP = Новый ЧтениеZipФайла(ПотокПакетаДанных);
		Исключение
			Продолжить;
		КонецПопытки;	
		
		ФайлПолучен = Ложь;
		Для Каждого ЭлементZIP Из ЧтениеZIP.Элементы Цикл
			
			//Если в архиве не пустой XML
			Если ВРег(ЭлементZIP.Расширение) <> "XML" Или ЭлементZIP.РазмерНесжатого = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			//Если файл в архиве целый
			Попытка
				ЧтениеZIP.Извлечь(ЭлементZIP, ИмяКаталога);
			Исключение
				Продолжить;
			КонецПопытки;
			
			ПутьКФайлуXML = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталога, ЭлементZIP.Имя);
			
			ФайлПолучен = Истина;
			
			Прервать;
			
		КонецЦикла;
		
		Если Не ФайлПолучен Тогда
			Продолжить;
		КонецЕсли;
		
		// Завершаем распаковку
		ЧтениеZIP.Закрыть();
		ПотокПакетаДанных.Закрыть();
		
		ПрефиксTNS = ПолучитьПрефиксTNS();
		//ЗапросXPath = СтрШаблон("//%1%2cash/%1%2cash-doc[%1%2type=2 and %1%2sum=140000]/descendant::%1%2num", ПрефиксTNS, ":");
		
		Если Не ФайлСодержитТег(ПутьКФайлуXML, ПрефиксTNS, ЗапросXPath) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеОбъектов.Добавить();
		НоваяСтрока.Архив = ВыборкаФайлы.ПриложенныйФайл;
		НоваяСтрока.Сеанс = ВыборкаФайлы.Сеанс;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПрефиксTNS()
	Возврат "t";
КонецФункции	

&НаСервере
Функция ФайлСодержитТег(ПутьКФайлуXML, ПрефиксTNS, ЗапросXPath)
		
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуXML);
	
	Построитель	= Новый ПостроительDOM;
	ДокументDOM = Построитель.Прочитать(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
		
	Разыменователь = Новый РазыменовательПространствИменDOM(ПолучитьСоответствиеПространствИмен(ДокументDOM, ПрефиксTNS));
	
	#Если Не ВебКлиент Тогда
	НаборУзлов = ДокументDOM.ВычислитьВыражениеXPath(ЗапросXPath, ДокументDOM, Разыменователь, ТипРезультатаDOMXPath.Число);
	#Иначе
	НаборУзлов = Неопределено;
	#КонецЕсли
	
	УдалитьФайлы(ПутьКФайлуXML);
	
	Возврат НаборУзлов.ЧисловоеЗначение > 0;
	
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеПространствИмен(ДокументDOM, ПрефиксTNS)
	
	СоответствиеПИ = Новый Соответствие;
	СчетчикTNS = 0;
	
	Для Каждого Атрибут Из ДокументDOM.ЭлементДокумента.Атрибуты Цикл
		
		Если Атрибут.Префикс = "xmlns" Тогда
			
			Если Атрибут.ЛокальноеИмя = ПрефиксTNS Тогда
				СчетчикTNS = СчетчикTNS + 1;
				ЛокальноеИмя = ПрефиксTNS + СчетчикTNS;
			Иначе
				ЛокальноеИмя = Атрибут.ЛокальноеИмя;
			КонецЕсли;
			
			СоответствиеПИ.Вставить(ЛокальноеИмя, Атрибут.Значение);
			
		КонецЕсли;
		
		Если ДокументDOM.ПространствоИменПоУмолчанию(Атрибут.Значение) Тогда
			
			СоответствиеПИ.Вставить(ПрефиксTNS, Атрибут.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеПИ;
	
КонецФункции

&НаКлиенте
Процедура ВыбираемыеТегиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не НоваяСтрока Или ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаНастройки Тогда
		Возврат;
	КонецЕсли;
	ОбновитьДанныеОбъектовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъектовНаСервере()
	
	ТЗДанныеОбъектов = РеквизитФормыВзначение("ДанныеОбъектов");
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Для Каждого ТекСтрока Из ВыбираемыеТеги Цикл
		ИмяКолонки = ?(СокрЛП(ТекСтрока.ПолеВыборки) = "", СокрЛП(ТекСтрока.Имя), СокрЛП(ТекСтрока.ПолеВыборки));
		Если ТЗДанныеОбъектов.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("Строка"), "ДанныеОбъектов"));
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Для Каждого ТекРеквизит Из МассивДобавляемыхРеквизитов Цикл
		ДанныеОбъектовКолонкаЭлемент = Элементы.Добавить("ДанныеОбъектов" + ТекРеквизит.Имя, Тип("ПолеФормы"), Элементы.ДанныеОбъектов);
		ДанныеОбъектовКолонкаЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		ДанныеОбъектовКолонкаЭлемент.ПутьКДанным = "ДанныеОбъектов." + ТекРеквизит.Имя;
	КонецЦикла;
КонецПроцедуры
